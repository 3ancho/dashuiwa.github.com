<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Decx = 1210]]></title>
  <link href="http://ruoranwang.github.com/atom.xml" rel="self"/>
  <link href="http://ruoranwang.github.com/"/>
  <updated>2013-02-28T23:55:01-05:00</updated>
  <id>http://ruoranwang.github.com/</id>
  <author>
    <name><![CDATA[Ruoran Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[play and cloud foundary]]></title>
    <link href="http://ruoranwang.github.com/blog/2013/02/28/play-and-cloud-foundary/"/>
    <updated>2013-02-28T23:52:00-05:00</updated>
    <id>http://ruoranwang.github.com/blog/2013/02/28/play-and-cloud-foundary</id>
    <content type="html"><![CDATA[<h2>Play! on Cloud Foundary</h2>

<h4>Play!</h4>

<p>Install is easy. Now you got verything inatslled.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># file conf/application.conf 
</span><span class='line'>
</span><span class='line'>db.default.driver=org.postgresql.Driver
</span><span class='line'>db.default.url="jdbc:postgresql://localhost/play_todolist"
</span><span class='line'>db.default.user="username"
</span><span class='line'>db.default.password="password"</span></code></pre></td></tr></table></div></figure>


<p>We are using PostgreSQL.</p>

<p>In thus those two lines is necessary:
<code>db.default.driver=org.postgresql.Driver</code> and <code>db.default.url="jdbc:postgresql://localhost/play_todolist"</code></p>

<p>However, you need to download:
<a href="http://jdbc.postgresql.org/download.html">postgresql-9.2-1002.jdbc4.jar</a>
Note: it&#8217;s jdbc4, not jdbc3.</p>

<h5>PostgreSQL</h5>

<p>Install is easy for all OSes.</p>

<p>MySQL command -> PostgreSQL command:</p>

<ul>
<li><code>mysql -&gt; psql</code></li>
<li><code>show databeses -&gt; \l</code></li>
<li><code>show tables -&gt; \d</code></li>
<li><code>create database DBNAME -&gt; The same</code></li>
</ul>


<p>For linux</p>

<p>you need to become user <code>postgres</code> and then type <code>psql</code> to enter the interactive shell.</p>

<p><code>\password</code> could change password
<code>\password USER</code> could change password for USER</p>

<p>To create a user
<code>create user USERNAME</code></p>

<p>You could figure out the reset using google :)</p>

<h4>Cloud Foundary</h4>

<ol>
<li>Sign up.</li>
<li>download rubygem.</li>
<li>deploy</li>
</ol>


<p>We don&#8217;t need micro cloud foundary, because we use vagrant (virtualbox).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Python virtualenvwrapper on OS X Mountain Lion]]></title>
    <link href="http://ruoranwang.github.com/blog/2013/01/11/install-python-virtualenvwrapper-on-os-x-mountain-lion/"/>
    <updated>2013-01-11T00:24:00-05:00</updated>
    <id>http://ruoranwang.github.com/blog/2013/01/11/install-python-virtualenvwrapper-on-os-x-mountain-lion</id>
    <content type="html"><![CDATA[<p>This seems trivial right? pip install?
Well, that&#8217;s not the case if you want virtualenv or virtualenvwrapper working properly.</p>

<p>You could, using pip, to install those packages. But you will notice even provided <code>--no-site-packages</code>, you will still able to import from system site-packages. (If you really did so, you will have them in <code>/Library/Python/2.7/site-packages/</code>). In my case, installing in virtualenv will end up placing packages into system site-packages path. Oh my zsh.</p>

<p>For many reasons you need to install python from homebrew or somewhere else.</p>

<h3>Mountain Lion Python (2.7.2)</h3>

<p>Mountain Lion Default python:</p>

<pre><code>which python 
/usr/bin/python 
</code></pre>

<p>Mountain Lion Defaut python Framework/Package/Library Path:</p>

<pre><code>/System/Library/Frameworks/Python.framework/Versions/2.7/
/Library/Python/2.7/site-packages/
</code></pre>

<p>Note: Mountain lion python will cause trouble when using virtualenv/virtualenvwrapper.</p>

<h3>Brew installed python (2.7.3)</h3>

<p>Simply:</p>

<pre><code>brew install python
</code></pre>

<p>I got:</p>

<pre><code>which python
/usr/local/bin/python
</code></pre>

<p>Then you got pip distribute ready.
Have fun with pip install.
My site-packages path is:</p>

<pre><code>/usr/local/lib/python2.7/site-packages/
</code></pre>

<h3>virtualenvwrapper</h3>

<pre><code>pip install virtualenvwrapper

export WORKON_HOME=~/Envs
mkdir -p $WORKON_HOME
source /usr/local/share/python/virtualenvwrapper.sh
# change above path accordingly 
mkvirtualenv env1
</code></pre>

<p>.zshrc or .bashrc add following:</p>

<pre><code>PATH=/usr/local/share/python/:$PATH
export WORKON_HOME=$HOME/.virtualenvs
source /usr/local/bin/virtualenvwrapper.sh
</code></pre>

<p>There are couple of paths you might need to add, such as <code>/usr/local/share/python/</code>.(This contains some python scripts. e.g yolk, virtualenvwrapper.sh, etc)</p>

<h4>List Installed packages</h4>

<pre><code>lssitepackages   
rmvirtualenv
cpvirtualenv
</code></pre>

<h4>Switch to a env</h4>

<pre><code>workon env1
deactivate
</code></pre>

<h3>With zsh</h3>

<p>In <code>$WORKON_HOME/postactivate</code> add:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PS1="$_OLD_VIRTUAL_PS1"
</span><span class='line'>_OLD_RPROMPT="$RPROMPT"
</span><span class='line'>RPROMPT="%{${fg_bold[white]}%}(env: %{${fg[green]}%}`basename \"$VIRTUAL_ENV\"`%{${fg_bold[white]}%})%{${reset_color}%} $RPROMPT"</span></code></pre></td></tr></table></div></figure>


<p>In <code>$WORKON_HOME/postdeactivate</code> add:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RPROMPT="$_OLD_RPROMPT"</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Bluetooth Serial Port on OS X Mountain Lion]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/10/19/using-bluetooth-serial-port-on-os-x-mountain-lion/"/>
    <updated>2012-10-19T00:38:00-04:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/10/19/using-bluetooth-serial-port-on-os-x-mountain-lion</id>
    <content type="html"><![CDATA[<h4>Using Bluetooth Serial Port on OS X Mountain Lion</h4>

<p>I am taking a robotics class, and simply wants to play with the bluetooth module. Maybe create a robot later to play with my cats?</p>

<p>So I will send a character &#8220;r&#8221; to arduino via bluetooth, and the program running on arduino will respond &#8220;Nina&#8221; as soon as it got the &#8220;r&#8221;.</p>

<h4>Procedures</h4>

<ul>
<li>Find the bluetooth, the name of device is AC, for some unknown reason.</li>
</ul>


<p><img src="http://ruoranwang.github.com/images/bluetooth/find.png"></p>

<ul>
<li>Pair with it, the pairing code is 0000 in my case.</li>
</ul>


<p><img src="http://ruoranwang.github.com/images/bluetooth/pair.png"></p>

<ul>
<li>The underlined part have some config to play with. The general idea is to use serial port service.</li>
</ul>


<p><img src="http://ruoranwang.github.com/images/bluetooth/config.png"></p>

<ul>
<li><code>Serial.println()</code> in arduino will write data to the pin1 (TX) and also to the USB cable. So you could compare your data received via bluetooth serial port with the data received via USB serial port. My usb serial port is <code>/dev/tty/usbmodemfa131</code>.</li>
</ul>


<p><img src="http://ruoranwang.github.com/images/bluetooth/arduino.png"></p>

<ul>
<li>The image below shows the display while using GNU <code>screen</code></li>
</ul>


<p><img src="http://ruoranwang.github.com/images/bluetooth/result.png"></p>

<h4>Using screen</h4>

<p>The number after the device name is the baud rate, which need to be the same as source.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>screen tty.AC-DevB 9600</span></code></pre></td></tr></table></div></figure>


<h4>Using PySerial</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In [2]: s = serial.Serial('/dev/tty.AC-DevB', 9600, timeout=1)
</span><span class='line'>
</span><span class='line'>In [3]: s.write("r")
</span><span class='line'>Out[3]: 1
</span><span class='line'>
</span><span class='line'>In [4]: s.read()
</span><span class='line'>Out[4]: 'N'
</span><span class='line'>
</span><span class='line'>In [5]: s.read()
</span><span class='line'>Out[5]: 'i'
</span><span class='line'>
</span><span class='line'>In [6]: s.read()
</span><span class='line'>Out[6]: 'n'
</span><span class='line'>
</span><span class='line'>In [7]: s.read()
</span><span class='line'>Out[7]: 'a'
</span><span class='line'>
</span><span class='line'>In [8]: s.read(10)
</span><span class='line'>Out[8]: '\r\n'
</span><span class='line'>
</span><span class='line'>In [9]: s.read(10)
</span><span class='line'>Out[9]: ''
</span><span class='line'>
</span><span class='line'>In [10]: s.write("r")
</span><span class='line'>Out[10]: 1
</span><span class='line'>
</span><span class='line'>In [11]: s.read(10)
</span><span class='line'>Out[11]: 'Nina\r\n'</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn python using python and iPython]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/10/18/learn-python-using-python-and-ipython/"/>
    <updated>2012-10-18T00:38:00-04:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/10/18/learn-python-using-python-and-ipython</id>
    <content type="html"><![CDATA[<p>Doesn&#8217;t the title sound awesome?</p>

<p>Expanded version:
Learn python(the language) using python(source code and test cases) and ipython(a python module)</p>

<p>So:</p>

<ol>
<li>In order to understand python(source code and test cases), you need knowledge of python(language) and ipython(to use the source!)</li>
<li>In order to use ipython, you need to play with python(language) in ipython</li>
</ol>


<p>The pseudo source code for the title:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>learn(python):
</span><span class='line'>    use = python, ipython
</span><span class='line'>    for item in use:
</span><span class='line'>        if understand(item): return True
</span><span class='line'>        else: return learn(item)</span></code></pre></td></tr></table></div></figure>


<p>Ok, I know that&#8217;s stupid. Here is my thought.</p>

<p>I had never read the python source code before. Then, I noticed (finally) the path printed while doing <code>logging?</code>. (Question mark <code>?</code> after an item will show the detail of that item.)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Type:       module
</span><span class='line'>String Form:&lt;module 'logging' from '/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/logging/__init__.pyc'&gt;
</span><span class='line'>File:       /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/logging/__init__.py</span></code></pre></td></tr></table></div></figure>


<p>Fortunately, I went to that path and viewed the files, finding those system standard modules/libraries very, very, very well documented.</p>

<p>I found many design patterns that I would like to learn, but had not clue about where to look at before.</p>

<p>In words, ipython is very useful for checking documentation for anything you want to play with. Plus the tab completion helps you to list submodules, functions, or variables. This makes exploring a module as easy as traversing a file directory.</p>

<p>As a result, I felt I was not using/learning python in a pythonic way. But now I (think I) do.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python lambda function]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/10/14/python-lambda-function/"/>
    <updated>2012-10-14T13:54:00-04:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/10/14/python-lambda-function</id>
    <content type="html"><![CDATA[<p>This is the first episode of a series that revisits features that I didn&#8217;t fully understand, about a technology such as Python, JavaScript, etc. The topic domain is, well, anything about computer science. (Really?) The purpose is, hmm, have fun. (Really?)</p>

<p>Ok, let&#8217;s get started, Python Lambda Functions.</p>

<ul>
<li>So, it&#8217;s anonymous functions, like <code>function() {}</code> in JavaScript, obviously.</li>
<li>It&#8217;s a feature inherited from functional programming, cool and confusing.</li>
<li>Work well with filter(), map(), and reduce(). (all take a function and a sequence)</li>
</ul>


<p>In summary, lambda in python, or possible in elsewhere, seems to be used to describe the individual affect of an AOE.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Nodejs]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/10/10/playing-with-nodejs/"/>
    <updated>2012-10-10T11:37:00-04:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/10/10/playing-with-nodejs</id>
    <content type="html"><![CDATA[<p>Recently I started to play with nodejs. Inspired by <a href="http://cnodejs.org">cnodejs.org</a>, I created a forum called <a href="http://a2um.com">A2UM</a>.
The forum is based on express, which seems to be very handy.</p>

<p>Here are the technologies that involved.</p>

<ul>
<li>CloudFlare for CDN.</li>
<li>VPS provided by DigitalOcean.</li>
<li>Forum source code from node_club</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start a micro instance with a larger EBS volume than the default one]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/06/28/start-a-micro-instance-with-a-larger-ebs-volume-than-the-default-one/"/>
    <updated>2012-06-28T00:00:00-04:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/06/28/start-a-micro-instance-with-a-larger-ebs-volume-than-the-default-one</id>
    <content type="html"><![CDATA[<p>Start a micro instance with a larger EBS volume than the default one.</p>

<p>ec2-run-instances -k KEY -n 1 -t t1.micro &#8211;block-device-mapping /dev/sda1=:10
ami-0ce41865 -r us-east-1d</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with sencha touch 2 on OS X 10.6]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/06/10/working-with-sencha-touch-2-on-os-x-106/"/>
    <updated>2012-06-10T00:00:00-04:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/06/10/working-with-sencha-touch-2-on-os-x-106</id>
    <content type="html"><![CDATA[<p>I failed many time to install the SDK tools for sencha touch 2. To clarify,
SDK tools is just some command line tools which accelerates the dev process.
Kinda like scaffolding in Ruby. SDK tools will be installed by a installer.
That is different from the actual package, which is a zip file downloaded. At
the time of writing, the extracted folder name is sencha-touch-2.0.1.1.</p>

<p>Ok, my first problem is: Unknown error running post-install step. Installation
may not complete correctly</p>

<p>Solution: Add following to zshrc (I am using zsh) export
PATH=/Applications/SenchaSDKTools-2.0.0-beta3/:$PATH export
PATH=/Applications/SenchaSDKTools-2.0.0-beta3/command:$PATH export
PATH=/Applications/SenchaSDKTools-2.0.0-beta3/jsbuilder:$PATH export
PATH=/Applications/SenchaSDKTools-2.0.0-beta3/appbuilder:$PATH</p>

<p>Second problem: [ERROR] Sencha SDK Tools 2.0.0-beta3 cannot be found from your
system (SENCHA_SDK_TOOLS_2_0_0_BETA3 environment variable is not set). Please
download and install version &#8220;2.0.0-beta3&#8221; of the tools from
<a href="http://www.sencha.com/products/sdk-%0Atools">http://www.sencha.com/products/sdk-tools</a> . Close this terminal and open a new one after the installation is
complete.</p>

<p>Solution: Add following to zshrc (again) export
SENCHA_SDK_TOOLS_2_0_0_BETA3=/Applications/SenchaSDKTools-2.0.0-beta3/</p>

<p>For bash, may add those environment variables to the corresponding rc file.</p>

<p>Reference: <a href="http://www.sencha.c%0Aom/forum/showthread.php?200583-Couldn-t-install-SDK-Tools-2.0.0-beta3-on-%0AOSX&amp;p=824752#post824752">http://www.sencha.com/forum/showthread.php?200583-Couldn-t
-install-SDK-Tools-2.0.0-beta3-on-OSX&amp;p=824752#post824752</a> <a href="http://www.sencha.com/forum/showthread.php?190083-Unknown-error-%0Arunning-post-install-step.-Installation-may-not-complete-correctly">http://www.sencha.com/forum/showthread.php?190083
-Unknown-error-running-post-install-step.-Installation-may-not-complete-
correctly</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 2.7 on Snow Leopard]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/04/10/python-27-on-snow-leopard/"/>
    <updated>2012-04-10T00:00:00-04:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/04/10/python-27-on-snow-leopard</id>
    <content type="html"><![CDATA[<p>Use the default easy_install, packages will be installed under python2.6.</p>

<ol>
<li><p>Download from python.org And make sure python &#8211;version is 2.7</p></li>
<li><p>Install pip curl -O <a href="http://python-distribute.org/distribute_setup.py">http://python-distribute.org/distribute_setup.py</a> python distribute_setup.py easy_install pip</p></li>
<li><p>Get Virtualenv working pip install virtualenvwrapper export WORKON_HOME=~/Envs mkdir -p $WORKON_HOME source /usr/local/bin/virtualenvwrapper.sh</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[snippets.vim: jinja/django template doesn't expand]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/03/06/snippetsvim-jinjadjango-template-doesnt-expand/"/>
    <updated>2012-03-06T00:00:00-05:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/03/06/snippetsvim-jinjadjango-template-doesnt-expand</id>
    <content type="html"><![CDATA[<p>I was configuring snippets.vim, which I should have done earlier that could
save a lot of time. Then, I ran into an issue. I&#8217;ve been developing a web app
using Flask, and this means I use jinja2 for html template. My templates are
all with extension .html, which should work directly with default html
snippets come with snippets.vim. But it doesn&#8217;t.</p>

<p>I didn&#8217;t find a solution online. However, I found some snippets for django
template. The final solution is just append content from html.snippets to
htmldjango.snippets.</p>

<pre><code>cat html.snippets &gt;&gt; htmldjango.snippets
</code></pre>

<p>And in .vimrc add</p>

<pre><code>autocmd FileType html set ft=htmldjango.snippets " For SnipMate
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim spell check ]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/02/25/vim-spell-check/"/>
    <updated>2012-02-25T00:00:00-05:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/02/25/vim-spell-check</id>
    <content type="html"><![CDATA[<p>I just found vim have built-in spell check. Never to late for me.</p>

<pre><code>:set spell spelllang=en_us    # enable
:set nospell    # disable
</code></pre>

<p>When highlighting the misspelled word:</p>

<pre><code>zg    # will add this to your own word list
z=    # find suggestion 
]s    # move to next misspelled word
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On the Internet, nobody knows you're a dog, NOT.]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/02/19/on-the-internet-nobody-knows-youre-a-dog-not/"/>
    <updated>2012-02-19T00:00:00-05:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/02/19/on-the-internet-nobody-knows-youre-a-dog-not</id>
    <content type="html"><![CDATA[<p>Born at the end of 1980s, fortunately, I have experienced the anonymous web.
Once, people can fake their names, hometown, and even gender. It was a time
that full of faked information, at a first glance. However, I remember the
forums and chat rooms are not full of non-sense info as nowadays. People used
to be graceful adventurers, but took arrows in the knees. Anyway, that web we
are used to familiar with is fading out. Dogs are kicked out of this Internet
game.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python + Vim: Got a nasty paper work done ]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/02/14/python--vim-got-a-nasty-paper-work-done/"/>
    <updated>2012-02-14T00:00:00-05:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/02/14/python&#8211;vim-got-a-nasty-paper-work-done</id>
    <content type="html"><![CDATA[<p>You are asked to fill out of Excel with the new eligible members of a group.</p>

<p>What you got: An Excel from the headquarter of this group contains a list of
people, which has a special formatting and equation kinda stuff plus a warning
&#8220;formatting couldn&#8217;t be changed!!!&#8221; This Excel also include the existing
members of this group. With &#8220;M&#8221; in the &#8220;Existing Member&#8221; column.</p>

<p>Another Excel from a different party, which has a list of people. However
there are more columns in this Excel, and even it shares the same column with
the previous one, they name their value differently. For example, in &#8220;major&#8221;
column &#8220;CPE&#8221; is equivalent to &#8220;Computer Engg&#8221; in another Excel. Another
example, in &#8220;First Name&#8221; column &#8220;Robert Allen&#8221; is &#8220;Robert&#8221; in another Excel.
Why? Simply because one party doesn&#8217;t care about middle name. The other, do
care, coma, but don&#8217;t even create a column &#8220;Middle Name&#8221;, thus put middle name
along with first name.</p>

<p>Your goal: The final Excel will have the same format as the first Excel.</p>

<p>My solution: Export both Excels in to .csv files. Manipulate the columns a
little bit using vim macro. First file: list.csv Second file: school.csv
Output file: output.csv</p>

<p>I will copy the output.csv and copy into the first Excel</p>

<pre><code>aaa = open("list.csv", "r")
bbb = open("school.csv", "r")
out = open("out.csv", "w")

member = []

ls1 = tbp.readlines()
for line in ls1:
    words = line.split(",")
    if " " in words[0]:
        words[0] = words[0].split(" ")[0]
    key = (words[0], words[1])
    member.append(key)

ls2 = iit.readlines()

major_dict = {"BME": "Biomedical engg",
              "CPE": "Computer engg",
              "EE": "Electrical engg",
              "ARCE": "Architectural engg",
              "CE": "Civil engg",
              "AE": "Aerospace engg",
              "ME": "Mechanical engg",
              "CHE": "Chemical engg",
              "MSE": "Materials science and engg"}

words = []
for line in ls2:
    if line == " " or line == " ":
        continue
    words = line.split(",")
    words[5].replace(" ", "")
    words[5].replace(" ", "")

    if words[5] in major_dict:
        major = major_dict[words[5]]
        fn = words[1]
        ln = words[0]
        sj = words[2]
        if sj == "Junior":
            year = "2013"
        else:
            year = "2012"
        month = "May"
        mem = ""
        for item in member:
            if fn in item and ln in item:
                mem = "M"
        out.write("{0},{1},{2},{3},{4},{5},{6} ".\
                    format(fn,ln,sj,month,year,major,mem) )
    else:
        print "ERROR! ", line
tbp.close()
iit.close()
out.close()
</code></pre>

<p>I am not familiar with Excel macro or any trick that could solve this problem,
with grace.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking for apps on Kindle Touch]]></title>
    <link href="http://ruoranwang.github.com/blog/2012/02/03/looking-for-apps-on-kindle-touch/"/>
    <updated>2012-02-03T00:00:00-05:00</updated>
    <id>http://ruoranwang.github.com/blog/2012/02/03/looking-for-apps-on-kindle-touch</id>
    <content type="html"><![CDATA[<p>It is a great pleasure to read books on KT. However, I am always trying to
check my email and read reddit. Arguably, I understand it is not a device
designed for application. But I really believe it could have couple of useful
apps that helpful.</p>

<ol>
<li><p>Weather App There are already service let you push your google reader items to app. Why not send a weather report? To where? Maybe a corner of the screen saver.</p></li>
<li><p>Email Client The gmail already works well on KT. A native app would boost up the experience. Maybe another corner of screen saver to indicate the new emails.</p></li>
<li><p>Browser shortcut. (Or shortcut for applications, in other words navigation bar) Now it takes 3 taps to bring up the browser, which could be done by 1. Anyway, there could be a better UI.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
